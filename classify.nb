(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    334512,       6943]
NotebookOptionsPosition[    329384,       6853]
NotebookOutlinePosition[    329737,       6869]
CellTagsIndexPosition[    329694,       6866]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{"Needs", "[", "\"\<CUDALink`\>\"", "]"}], "\n", 
 RowBox[{"CUDAQ", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.73781961211594*^9, 3.737819623361191*^9}, 
   3.737820739280101*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"537272cc-cea5-4b49-8e64-39f818ae04cf"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.7378196349843063`*^9, {3.737820066259718*^9, 3.73782009374704*^9}, 
   3.737820267664699*^9, 3.737820454054099*^9, 3.737820749005802*^9, 
   3.737828542973955*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"9246bc32-f80b-4584-827c-6708744b0f6c"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"generateentire", "[", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "NLines", ",", "c1", ",", "th", ",", "LL", ",", "lines", ",", "LINES", 
      ",", "NCircles", ",", "CIRCS", ",", "disks", ",", "rx", ",", "ry"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NLines", "=", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", 
        RowBox[{"7", ",", "16"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"LINES", "=", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"c1", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"RandomReal", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "5"}], ",", "5"}], "}"}], "]"}], ",", 
            RowBox[{"RandomReal", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "5"}], ",", "5"}], "}"}], "]"}]}], "}"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"th", "=", 
          RowBox[{"RandomReal", "[", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"2", "\[Pi]"}]}], "}"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"LL", "=", 
          RowBox[{"RandomReal", "[", 
           RowBox[{"{", 
            RowBox[{"0", ",", "5"}], "}"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"lines", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Thickness", "[", 
             RowBox[{"RandomReal", "[", 
              RowBox[{"{", 
               RowBox[{"0.003", ",", "0.005"}], "}"}], "]"}], "]"}], ",", 
            RowBox[{"Line", "[", 
             RowBox[{"{", 
              RowBox[{"c1", ",", 
               RowBox[{"c1", "+", 
                RowBox[{"LL", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Cos", "[", "th", "]"}], ",", 
                   RowBox[{"Sin", "[", "th", "]"}]}], "}"}]}]}]}], "}"}], 
             "]"}]}], "}"}]}]}], "\[IndentingNewLine]", ",", 
        RowBox[{"{", "NLines", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"NCircles", "=", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", 
        RowBox[{"7", ",", "16"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"CIRCS", "=", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"c1", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"RandomReal", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "5"}], ",", "5"}], "}"}], "]"}], ",", 
            RowBox[{"RandomReal", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "5"}], ",", "5"}], "}"}], "]"}]}], "}"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"rx", "=", 
          RowBox[{"RandomReal", "[", 
           RowBox[{"{", 
            RowBox[{"0.25", ",", "0.5"}], "}"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"ry", "=", 
          RowBox[{"RandomReal", "[", 
           RowBox[{"{", 
            RowBox[{"0.25", ",", "0.5"}], "}"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"disks", "=", 
          RowBox[{"Disk", "[", 
           RowBox[{"c1", ",", 
            RowBox[{"{", 
             RowBox[{"rx", ",", "ry"}], "}"}]}], "]"}]}]}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", "NCircles", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Graphics", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"LINES", ",", "CIRCS"}], "}"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "}"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\n", 
 RowBox[{
  RowBox[{"generateline", "[", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "NLines", ",", "c1", ",", "th", ",", "LL", ",", "thi", ",", "lines1", 
      ",", "lines2", ",", "BOX"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"c1", "=", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"BOX", "=", 
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{"0.5", ",", "1.5"}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"th", "=", 
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"2", "\[Pi]"}]}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"LL", "=", 
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"thi", "=", 
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{"0.001", ",", "0.08"}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"lines1", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Thickness", "[", "thi", "]"}], ",", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{"c1", ",", 
           RowBox[{"c1", "+", 
            RowBox[{"LL", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Cos", "[", "th", "]"}], ",", 
               RowBox[{"Sin", "[", "th", "]"}]}], "}"}]}]}]}], "}"}], "]"}]}],
        "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"lines2", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Thickness", "[", "thi", "]"}], ",", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{"c1", ",", 
           RowBox[{"c1", "-", 
            RowBox[{"LL", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Cos", "[", "th", "]"}], ",", 
               RowBox[{"Sin", "[", "th", "]"}]}], "}"}]}]}]}], "}"}], "]"}]}],
        "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Graphics", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"lines1", ",", "lines2"}], "}"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "BOX"}], ",", "BOX"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "BOX"}], ",", "BOX"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"ImageSize", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"128", ",", "128"}], "}"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.737808561182117*^9, 3.737808826783115*^9}, {
   3.737808862037294*^9, 3.7378089022619762`*^9}, {3.7378089758657827`*^9, 
   3.73780899681*^9}, 3.737820752161973*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"b2f76d6f-9ec8-46e1-aed6-39324c06e970"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generatecirc", "[", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "NLines", ",", "c1", ",", "th", ",", "LL", ",", "lines", ",", "LINES", 
      ",", "NCircles", ",", "CIRCS", ",", "disks", ",", "rx", ",", "ry", ",", 
      "BOX"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"c1", "=", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"BOX", "=", 
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{"0.5", ",", "1.5"}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rx", "=", 
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{"0.25", ",", "0.5"}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ry", "=", 
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{"0.25", ",", "0.5"}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"disks", "=", 
      RowBox[{"Disk", "[", 
       RowBox[{"c1", ",", 
        RowBox[{"{", 
         RowBox[{"rx", ",", "ry"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Graphics", "[", 
      RowBox[{"disks", ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "BOX"}], ",", "BOX"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "BOX"}], ",", "BOX"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"ImageSize", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"128", ",", "128"}], "}"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.737811793471078*^9, 3.737811859722497*^9}, {
   3.73781189296777*^9, 3.737811915887673*^9}, {3.7378120099519978`*^9, 
   3.737812012309739*^9}, 3.737813268391905*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"55018b46-9792-4031-b317-656d7763fb9e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generateblank", "[", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "NLines", ",", "c1", ",", "th", ",", "LL", ",", "lines", ",", "LINES", 
      ",", "NCircles", ",", "CIRCS", ",", "disks", ",", "rx", ",", "ry", ",", 
      "BOX", ",", "rrr", ",", "thi", ",", "lines1", ",", "lines2"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"rrr", "=", 
      RowBox[{"RandomReal", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"rrr", "<", "0.6"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Graphics", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"White", ",", 
           RowBox[{"Disk", "[", "]"}]}], "}"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"128", ",", "128"}], "}"}]}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"rrr", "<", "0.8"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"BOX", "=", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{"0.5", ",", "1.5"}], "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"c1", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"RandomReal", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "BOX"}], ",", "BOX"}], "}"}], "]"}], ",", 
             RowBox[{"RandomReal", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "BOX"}], ",", "BOX"}], "}"}], "]"}]}], "}"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"rx", "=", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{"0.25", ",", "0.5"}], "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"ry", "=", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{"0.25", ",", "0.5"}], "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"disks", "=", 
           RowBox[{"Disk", "[", 
            RowBox[{"c1", ",", 
             RowBox[{"{", 
              RowBox[{"rx", ",", "ry"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Graphics", "[", 
           RowBox[{"disks", ",", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "BOX"}], ",", "BOX"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "BOX"}], ",", "BOX"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"ImageSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"128", ",", "128"}], "}"}]}]}], "]"}]}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"BOX", "=", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{"0.5", ",", 
              RowBox[{"1", "\[IndentingNewLine]", ".5"}]}], "}"}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"c1", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"RandomReal", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "BOX"}], ",", "BOX"}], "}"}], "]"}], ",", 
             RowBox[{"RandomReal", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "BOX"}], ",", "BOX"}], "}"}], "]"}]}], "}"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"th", "=", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{"2", "\[Pi]"}]}], "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"LL", "=", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"thi", "=", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{"0.01", ",", "0.03"}], "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"lines1", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Thickness", "[", "thi", "]"}], ",", 
             RowBox[{"Line", "[", 
              RowBox[{"{", 
               RowBox[{"c1", ",", 
                RowBox[{"c1", "+", 
                 RowBox[{"LL", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Cos", "[", "th", "]"}], ",", 
                    RowBox[{"Sin", "[", "th", "]"}]}], "}"}]}]}]}], "}"}], 
              "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"lines2", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Thickness", "[", "thi", "]"}], ",", 
             RowBox[{"Line", "[", 
              RowBox[{"{", 
               RowBox[{"c1", ",", 
                RowBox[{"c1", "-", 
                 RowBox[{"LL", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Cos", "[", "th", "]"}], ",", 
                    RowBox[{"Sin", "[", "th", "]"}]}], "}"}]}]}]}], "}"}], 
              "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Graphics", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"lines1", ",", "lines2"}], "}"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "BOX"}], ",", "BOX"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "BOX"}], ",", "BOX"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"ImageSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"128", ",", "128"}], "}"}]}]}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.737811931065936*^9, 3.737812024895606*^9}, {
   3.737812551766337*^9, 3.737812617091803*^9}, {3.737813274226254*^9, 
   3.7378132890523243`*^9}, 3.737816298467722*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"0444eb61-1f2f-4fa2-9f83-a0bf219bfda6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"lines", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"generateline", "[", "]"}], "\[Rule]", "1"}], ",", 
     RowBox[{"{", "8000", "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"circs", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"generatecirc", "[", "]"}], "\[Rule]", " ", "2"}], ",", 
     RowBox[{"{", "8000", "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"blanks", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"generateblank", "[", "]"}], "\[Rule]", " ", "3"}], ",", 
     RowBox[{"{", "8000", "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"lines", ",", " ", "circs", ",", " ", "blanks"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"RandomSample", "[", "data", "]"}]}], ";"}], "\n", 
 RowBox[{"Length", "[", "data", "]"}]}], "Input",
 CellChangeTimes->{{3.737813001504506*^9, 3.737813058750121*^9}, 
   3.737820771500224*^9, {3.7378285646508503`*^9, 3.737828580859289*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"3680eafe-f529-46f2-af4f-f949a1be13bd"],

Cell[BoxData["24000"], "Output",
 CellChangeTimes->{
  3.737813188728389*^9, 3.737813316519932*^9, 3.737816335477643*^9, 
   3.737817384018223*^9, 3.737819682727294*^9, 3.737820299461762*^9, 
   3.737820773478779*^9, {3.737828556084795*^9, 3.737828583109674*^9}},
 CellLabel->"Out[18]=",ExpressionUUID->"65675aff-ee19-44be-a9a0-b432fc7f43e6"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"training", "=", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "20000"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", "=", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"20001", ";;"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.737813190942947*^9, 3.7378132299163837`*^9}, {
  3.7378173837795277`*^9, 3.7378173860978928`*^9}, {3.737828604338993*^9, 
  3.737828613755355*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"259c73e6-f10d-4050-8ea1-7e5b59059f39"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"network", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"170", ",", "3"}], "]"}], ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"FlattenLayer", "[", "]"}], ",", "100", ",", 
      RowBox[{"DropoutLayer", "[", "]"}], ",", "Ramp", ",", "3", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], "]"}]}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"128", ",", "128"}], "}"}], ",", "\"\<Grayscale\>\""}], 
       "}"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.737813450091385*^9, 3.7378134853423023`*^9}, {
  3.737813754371222*^9, 3.737813759680203*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"627c33cd-c71f-4737-a793-e672ccbc628e"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["10", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{170, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{170}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 170, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{170, 126, 126}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{170}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{170}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{170}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{170}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 170, 
                    "$SpatialDimensions" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{170, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{170, 126, 126}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {170, 126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{170, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{170, 126, 126}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 170, "$InputSize" -> {126, 126}, 
                    "$OutputSize" -> {63, 63}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{170, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{170, 63, 63}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{170, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{674730}, NeuralNetworks`RealT]]], 
                    "6" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{100, 674730}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 674730, "$InputDimensions" -> {674730}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{674730}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "7" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "9" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{3, 100}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {128, 128}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 128, 128}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3}, "InputDepth" -> 1, "Dimensions" -> 
                    3, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"128\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"170\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"170\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"170\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"170\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"674730\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7378135007445593`*^9, 3.737814740965735*^9, 
  3.737816347855771*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"9defbd74-f369-45e0-99cf-6a442580dfd1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"network2", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"16", ",", "3"}], "]"}], ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"32", ",", "3"}], "]"}], ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"64", ",", "3"}], "]"}], ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"FlattenLayer", "[", "]"}], ",", "100", ",", 
      RowBox[{"DropoutLayer", "[", "]"}], ",", "Ramp", ",", "3", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], "]"}]}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"128", ",", "128"}], "}"}], ",", "\"\<Grayscale\>\""}], 
       "}"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.737815053203279*^9, 3.737815105853303*^9}, {
  3.737821361027883*^9, 3.737821389501107*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"51357dae-68c2-4cf4-a691-9659d26efc59"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["18", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{16, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 126, 126}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 126, 126}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 126, 126}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 16, "$InputSize" -> {126, 126}, 
                    "$OutputSize" -> {63, 63}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 63, 63}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{32, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 61, 61}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 61, 61}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 61, 61}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 32, "$InputSize" -> {61, 61}, 
                    "$OutputSize" -> {30, 30}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 30, 30}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 32, 
                    "$GroupNumber" -> 1, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 28, 28}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 28, 28}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 28, 28}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {14, 14}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{12544}, NeuralNetworks`RealT]]], 
                    "14" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{100, 12544}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 12544, "$InputDimensions" -> {12544}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{12544}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "15" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "16" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "17" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{3, 100}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {128, 128}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 128, 128}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3}, "InputDepth" -> 1, "Dimensions" -> 
                    3, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"128\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"30\"", "\"30\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"12544\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.737815117595488*^9, 3.7378163487300243`*^9, 3.737817393185049*^9, 
   3.737819697115202*^9, 3.737820147308214*^9, 3.7378203127643547`*^9, 
   3.737820485810582*^9, {3.737821398173904*^9, 3.737821404022643*^9}, 
   3.737828631260988*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"582b362d-8fab-4286-bdfb-9f6e78399a0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"network2", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"8", ",", "3"}], "]"}], ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"16", ",", "3"}], "]"}], ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"32", ",", "3"}], "]"}], ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"64", ",", "3"}], "]"}], ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"FlattenLayer", "[", "]"}], ",", "100", ",", 
      RowBox[{"DropoutLayer", "[", "]"}], ",", "Ramp", ",", "3", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], "]"}]}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"128", ",", "128"}], "}"}], ",", "\"\<Grayscale\>\""}], 
       "}"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.737817457934122*^9, 3.7378174916271152`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"137bbcab-6b46-4e79-a550-c0ff5557dea8"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["22", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{8, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 8, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{8, 126, 126}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 8, 
                    "$SpatialDimensions" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{8, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{8, 126, 126}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{8, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{8, 126, 126}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 8, "$InputSize" -> {126, 126}, 
                    "$OutputSize" -> {63, 63}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{8, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{8, 63, 63}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{16, 8, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 8, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{8, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 61, 61}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 61, 61}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 61, 61}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 16, "$InputSize" -> {61, 61}, 
                    "$OutputSize" -> {30, 30}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 30, 30}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{32, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 28, 28}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 28, 28}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 28, 28}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 32, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {14, 14}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 14, 14}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 32, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {12, 12}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 12, 12}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {12, 12}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 12, 12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 12, 12}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 12, 12}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 12, 12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 12, 12}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {12, 12}, 
                    "$OutputSize" -> {6, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 12, 12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 6, 6}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 6, 6}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2304}, NeuralNetworks`RealT]]], 
                    "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{100, 2304}, NeuralNetworks`RealT],
                     "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 2304, "$InputDimensions" -> {2304}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2304}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "19" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "20" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "21" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{3, 100}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {128, 128}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 128, 128}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3}, "InputDepth" -> 1, "Dimensions" -> 
                    3, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"128\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"8\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"8\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"8\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"8\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"30\"", "\"30\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"12\"", "\"12\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"12\"", "\"12\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"12\"", "\"12\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"6\"", "\"6\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2304\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"20\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"21\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"22\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {301., {182., 188.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7378174607400427`*^9, 3.737817492029067*^9}, 
   3.737819703958262*^9, 3.7378207965986843`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"a9a77baf-1b21-42ab-a7c7-8162c427f05a"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"window", "=", "100"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"stepsize", "=", "2500"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"counter", " ", "=", " ", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"minloss", "=", "2345346546565556"}], ";"}]}], "Input",
 CellChangeTimes->{{3.737224460088572*^9, 3.737224460423192*^9}, {
  3.7372258557927017`*^9, 3.737225859818954*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"fcada6a8-8407-43e9-8848-cca0ba23e5de"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"network", ",", "training", ",", 
     RowBox[{"ValidationSet", "\[Rule]", "test"}], ",", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "300"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.737813450091385*^9, 3.73781346186926*^9}},
 CellLabel->
  "In[192]:=",ExpressionUUID->"693f1fb4-c1eb-4ad6-a829-8f5818e66421"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net2", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"network2", ",", "training", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "test"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "1000"}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}], ",", " ", 
    RowBox[{"TrainingProgressFunction", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"#BatchLoss", "<", "2345346546565556"}], 
          RowBox[{"(*", "minloss", "*)"}], ",", 
          RowBox[{
           RowBox[{"minloss", "=", "#BatchLoss"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Print", "[", 
            RowBox[{"#BatchLoss", ",", "\"\<   \>\"", ",", "#Round"}], "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"counter", "++"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Export", "[", 
            RowBox[{
             RowBox[{"\"\</scratch/classify_net_\>\"", "<>", 
              RowBox[{"ToString", "[", "counter", "]"}], "<>", 
              "\"\<.wlnet\>\""}], ",", "#Net"}], "]"}]}]}], "]"}], "&"}], ",", 
       RowBox[{"\"\<Interval\>\"", "\[Rule]", 
        RowBox[{"Quantity", "[", 
         RowBox[{"stepsize", ",", "\"\<Batches\>\""}], "]"}]}]}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.737813450091385*^9, 3.73781346186926*^9}, {
   3.737815126168219*^9, 3.737815129693516*^9}, {3.737819942369659*^9, 
   3.737820009294683*^9}, {3.737820245731187*^9, 3.737820251472405*^9}, {
   3.737820485711462*^9, 3.737820485722437*^9}, {3.7378286519963503`*^9, 
   3.7378286523958607`*^9}, {3.737828858118651*^9, 3.7378288897658052`*^9}, 
   3.738594140399108*^9},
 CellLabel->"In[28]:=",ExpressionUUID->"391acf20-a101-4948-ac14-a06b64cfbfaf"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["18", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{16, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{16}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 126, 126}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{16}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{16}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{16}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{16}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 126, 126}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 126, 126}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 16, "$InputSize" -> {126, 126}, 
                    "$OutputSize" -> {63, 63}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 63, 63}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 16, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{32}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 61, 61}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{32}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 61, 61}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 61, 61}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 32, "$InputSize" -> {61, 61}, 
                    "$OutputSize" -> {30, 30}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 30, 30}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 32, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 32, 
                    "$GroupNumber" -> 1, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 28, 28}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 28, 28}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 28, 28}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {14, 14}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{12544}, NeuralNetworks`RealT]]], 
                    "14" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 12544}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 12544, "$InputDimensions" -> {12544}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{12544}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "15" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "16" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "17" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{3, 100}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{3}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {128, 128}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 128, 128}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3}, "InputDepth" -> 1, "Dimensions" -> 
                    3, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"128\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"30\"", "\"30\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"12544\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.737888886548197*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"52c9edfb-bc27-400c-b3c5-8ee6b78e9677"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net2", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"test", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<Probabilities\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7378135513723183`*^9, 3.737813569190803*^9}, {
   3.737813639845271*^9, 3.7378136400743103`*^9}, {3.737815711650522*^9, 
   3.73781571480429*^9}, 3.737816370932765*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"fcffb957-49cb-4c07-8a9c-2f87fb350a79"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "4.983101007383084`*^-7"}], ",", 
   RowBox[{"2", "\[Rule]", "0.9984865188598633`"}], ",", 
   RowBox[{"3", "\[Rule]", "0.0015129996463656425`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.7378135550362253`*^9, 3.7378135696517687`*^9}, 
   3.7378136410499763`*^9, 3.737814282257186*^9, {3.737815709661911*^9, 
   3.7378157154147778`*^9}, 3.73781938798781*^9, 3.7378206180792007`*^9, 
   3.737821091642953*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"43ed3781-1c9b-43f7-a9f0-137a116f3906"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"image", "=", 
  RowBox[{"generateentire", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.737815742592641*^9, 3.737815746707703*^9}, 
   3.7378213090434313`*^9, {3.7378897101481247`*^9, 3.737889718239025*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"d907b061-ebfb-4239-a72b-b7d619a69c9d"],

Cell[BoxData[
 GraphicsBox[{{
    {Thickness[0.003994299658263532], 
     LineBox[{{0.6913104905972549, 3.4538842805457612`}, {0.1704196858653958, 
      7.305620162783604}}]}, 
    {Thickness[0.0030640403535342055`], 
     LineBox[{{4.598495240963302, -3.270637279899905}, {
      1.7336398334779761`, -6.422542134078298}}]}, 
    {Thickness[0.003907765432559765], 
     LineBox[{{-0.6344473715627643, -4.677604049488814}, {
      2.0230422710160125`, -2.890701333206179}}]}, 
    {Thickness[0.004115787580170241], 
     LineBox[{{-2.551992127655339, 4.976958099703431}, {-5.2653446772388435`, 
      1.0066698529925189`}}]}, 
    {Thickness[0.004389391969808881], 
     LineBox[{{-2.1455170431134096`, -1.486703105789168}, {
      0.8721720146234362, -1.3745139700260502`}}]}, 
    {Thickness[0.003188224762612868], 
     LineBox[{{-1.329808134328129, -0.6820798440790092}, \
{-1.1745746234366754`, -0.015627997018040185`}}]}, 
    {Thickness[0.0031540070284263003`], 
     LineBox[{{-2.34658714197524, 2.725634233698184}, {-3.541197254268975, 
      2.7990289407844253`}}]}}, {
    DiskBox[{-2.704876741290395, 2.3894468387359495}, \
{0.30504116403987536, 0.33345064647807154}], 
    DiskBox[{4.094484012099478, 4.285968194982615}, \
{0.3828249714882016, 0.36573258547384857}], 
    DiskBox[{2.070586491638018, 4.946125576091333}, \
{0.49771902168841275, 0.43820214579948874}], 
    DiskBox[{1.2642578220294816, -2.1719635185196413}, \
{0.4887484398542348, 0.4049399814432261}], 
    DiskBox[{-2.0679973043727102, -1.2398754716088938}, \
{0.4115921777567396, 0.31165573063288926}], 
    DiskBox[{0.5454021237995104, 3.9710510810022974}, \
{0.27063219129748056, 0.35628956686131935}], 
    DiskBox[{4.425361349330508, -2.260834311847603}, \
{0.4349699463294297, 0.36404935283691137}], 
    DiskBox[{4.567797152907218, -0.6273619655085412}, \
{0.29678097673752035, 0.4331990097616764}], 
    DiskBox[{4.775171006052865, -3.311119691230026}, \
{0.39551360921851203, 0.4834936155879592}], 
    DiskBox[{-0.5002757347732647, -0.6634003257841119}, 
     {0.33287909337287896, 0.3022941660986584}], 
    DiskBox[{-4.1278472309174035, -1.4395275212979186}, \
{0.39675448624082893, 0.484356435271848}], 
    DiskBox[{0.7766200868361004, -2.3890885779567768}, \
{0.45263555678678696, 0.43404600727942}], 
    DiskBox[{-2.654897127416106, -3.8090062256178925}, \
{0.36139350170953066, 0.4657040717686899}], 
    DiskBox[{3.3737694429629563, -0.22431490655278807}, \
{0.2818145010756691, 0.37617008755737324}], 
    DiskBox[{-3.0135536541091454, 1.7512221834261474}, \
{0.3195043130855699, 0.31045298884586703}]}},
  PlotRange->{{-5, 5}, {-5, 5}}]], "Output",
 CellChangeTimes->{
  3.7378157471168137`*^9, {3.737816771120981*^9, 3.737816784783146*^9}, {
   3.737820622508939*^9, 3.737820626425873*^9}, {3.737821094738209*^9, 
   3.737821098173366*^9}, {3.7378897347299957`*^9, 3.737889749723117*^9}},
 CellLabel->"Out[33]=",ExpressionUUID->"4e4b4910-b093-42f1-87a3-76414153b0f0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"imagedata", "=", 
   RowBox[{"ImageData", "[", 
    RowBox[{"ColorConvert", "[", 
     RowBox[{"image", ",", "\"\<Grayscale\>\""}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.737815752511044*^9, 3.737815770490698*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"e1efca10-57de-4e45-b4e5-7c9ba3df6cab"],

Cell[BoxData[
 RowBox[{
  RowBox[{"imagedata", "=", 
   RowBox[{"1", "-", "imagedata"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7378158252783813`*^9, 3.737815829274702*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"635d0e7e-a9e7-447c-85ac-ff493821bc56"],

Cell[BoxData[
 RowBox[{
  RowBox[{"imagedata", "=", 
   RowBox[{"ArrayPad", "[", 
    RowBox[{"imagedata", ",", "64"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.737815790119763*^9, 3.737815805738743*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"2fcd5fcd-afc0-41f1-8f48-62ca61fef5ff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "imagedata", "]"}]], "Input",
 CellChangeTimes->{{3.7378158068582478`*^9, 3.7378158135067663`*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"bd124851-6e0e-4f4b-9292-3a10687d43bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"488", ",", "488"}], "}"}]], "Output",
 CellChangeTimes->{{3.737815814107836*^9, 3.73781583137317*^9}, 
   3.7378167958898287`*^9, 3.73782063579256*^9, 3.737821105381359*^9, 
   3.7378220159051857`*^9, 3.737889764860231*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"f7242b9a-c8d4-466b-8ab8-4b0649426813"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"i", "=", "333"}], "\[IndentingNewLine]", 
 RowBox[{"j", "=", "333"}]}], "Input",
 CellChangeTimes->{{3.737816851759449*^9, 3.7378168595089006`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"cb3aeac0-ff4f-48ef-9dba-d26026dc3342"],

Cell[BoxData["333"], "Output",
 CellChangeTimes->{3.7378168600205097`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"ad8382e1-0aff-4369-bcde-046a4bb13945"],

Cell[BoxData["333"], "Output",
 CellChangeTimes->{3.737816860038971*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"745456d9-d99b-4466-8318-e7d616add173"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net2", "[", 
  RowBox[{
   RowBox[{"ArrayPlot", "[", 
    RowBox[{
     RowBox[{"imagedata", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{
         RowBox[{"i", "-", "30"}], ";;", 
         RowBox[{"i", "+", "20"}]}], ",", 
        RowBox[{
         RowBox[{"j", "-", "20"}], ";;", 
         RowBox[{"j", "+", "20"}]}]}], "]"}], "]"}], ",", 
     RowBox[{"PlotRangePadding", "\[Rule]", "None"}], ",", 
     RowBox[{"Frame", "\[Rule]", "False"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"128", ",", "128"}], "}"}]}]}], "]"}], ",", 
   "\"\<Probabilities\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.737820639519466*^9, 
  3.737820640172688*^9}},ExpressionUUID->"01bc7720-5e2a-4d2b-a6f3-\
61082e8aa279"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "3.5354830174583185`*^-11"}], ",", 
   RowBox[{"2", "\[Rule]", "6.898753703715732`*^-12"}], ",", 
   RowBox[{"3", "\[Rule]", "1.`"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.7378168609626627`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"bfd8af23-07f4-44c0-b197-cce549e869a8"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DistributeDefinitions", "[", "net2", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ps", "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Print", "[", "i", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"p", "=", 
          RowBox[{"net2", "[", 
           RowBox[{
            RowBox[{"ArrayPlot", "[", 
             RowBox[{
              RowBox[{"imagedata", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"i", "-", "30"}], ";;", 
                  RowBox[{"i", "+", "30"}]}], ",", 
                 RowBox[{
                  RowBox[{"j", "-", "30"}], ";;", 
                  RowBox[{"j", "+", "30"}]}]}], "]"}], "]"}], ",", 
              RowBox[{"PlotRangePadding", "\[Rule]", "None"}], ",", 
              RowBox[{"Frame", "\[Rule]", "False"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"128", ",", "128"}], "}"}]}]}], "]"}], ",", 
            "\"\<Probabilities\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"p", "[", "1", "]"}], ",", 
           RowBox[{"p", "[", "2", "]"}], ",", 
           RowBox[{"p", "[", "3", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
        ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "64", ",", 
          RowBox[{"488", "-", "64"}], ",", "2"}], "}"}]}], "]"}]}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "64", ",", 
       RowBox[{"488", "-", "64"}], ",", "2"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.737816900129223*^9, 3.7378169042645807`*^9}, 
   3.7378169838151283`*^9, 3.7378206986060963`*^9, {3.737821142037157*^9, 
   3.737821157762085*^9}, {3.737822020240067*^9, 3.737822042095627*^9}, 
   3.7378897934858093`*^9, {3.7378898271877213`*^9, 3.737889833078611*^9}, 
   3.737899145676873*^9},
 CellLabel->"In[42]:=",ExpressionUUID->"244db3a3-0420-43ee-b826-0c3bedc936b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cmap", "=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Blend", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "Blue"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0.25", ",", "Green"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0.5", ",", "Yellow"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0.75", ",", "Orange"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "Red"}], "}"}]}], "}"}], ",", "#"}], "]"}], "&"}],
     ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.737901413694487*^9, 3.737901487352269*^9}, {
   3.7379053201652822`*^9, 3.7379053286842623`*^9}, {3.7379082135925703`*^9, 
   3.7379082149600897`*^9}, {3.7379797390198383`*^9, 
   3.7379797411256933`*^9}, {3.7379800153403177`*^9, 3.737980061244729*^9}, 
   3.73842696410259*^9},
 CellLabel->"In[63]:=",ExpressionUUID->"7967ada4-3726-4ff0-9dab-079e0f3a1b4a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ImageAssemble", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"ArrayPlot", "[", 
     RowBox[{
      RowBox[{"ps", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "All", ",", "1"}], "]"}], "]"}], ",", 
      RowBox[{"ColorFunction", "\[Rule]", "cmap"}], ",", 
      RowBox[{"PlotRangePadding", "\[Rule]", "None"}]}], "]"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"ArrayPlot", "[", 
     RowBox[{
      RowBox[{"ps", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "All", ",", "2"}], "]"}], "]"}], ",", 
      RowBox[{"ColorFunction", "\[Rule]", "cmap"}], ",", 
      RowBox[{"PlotRangePadding", "\[Rule]", "None"}]}], "]"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"ArrayPlot", "[", 
     RowBox[{
      RowBox[{"ps", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "All", ",", "3"}], "]"}], "]"}], ",", 
      RowBox[{"ColorFunction", "\[Rule]", "cmap"}], ",", 
      RowBox[{"PlotRangePadding", "\[Rule]", "None"}]}], "]"}]}], 
   "\[IndentingNewLine]", "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.737816045563489*^9, 3.737816047665841*^9}, {
  3.7378171371800337`*^9, 3.737817195448957*^9}, {3.737817236278228*^9, 
  3.7378172366226673`*^9}, {3.737821229367947*^9, 3.737821290333715*^9}, {
  3.737901498673967*^9, 3.737901513912331*^9}, {3.737901560877635*^9, 
  3.737901608274287*^9}, {3.73790448918569*^9, 3.737904495529224*^9}, {
  3.737904532072145*^9, 3.7379045415284357`*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"895da777-4090-4e19-9ead-c481d01ed54c"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3QecZVWV7/HVXdVVnQOd6EBGQFoEJIhKaBVBFCRIUDCBiiIKAiIMOIIP
fDAOAubnOMOoIEMQQWRUREYcRxlBJQhiAFSSIEgOnej99tq7hIKmq++quveu
c87+3c/3w6fo6ntrndv1Wb3+1Xvvs85Bh+918GgROWps/M9eBx7z6iOPPPAf
3jw1/s8+hx11yPsOe+97djnsI+9933uP3OagnviL7x8lsk2viH4cePDgwYMH
Dx48ePDgwaN6j4N58ODBw/Kgb/DgwcP6oG/w4MHD+sh9QySU663nRjcGifyL
qbV/O0i5l4EOo28AsHqmb/iX4mhBcmfiXkyt7Zq4l4EOY95Q5JR2IaeUgb4B
wIqcosgp7UJOKUPp88Zaf4ruDhLJ2KeUe0m1NvOvyr0MdFjpfQPlGP20yp0t
/x3Rs0y5F1ZDpeeUKckDSW/iXlKtjU/cy3hBo5JcYf6zzr/iXlgNlT5vkFPa
i5xShtL7BspBTmkfcgo5pZ3IKWUod94Y96T649pq+x8r95KAmii3b6DZRi1X
Ux5WB385ui1IFD6ZfDrZU8nbzlbuBddKuTklT6ofTNZM3EtC2/UnWyQPqvFB
zU3k7LdF4aWi3EutlXLnDXIKMFzl9g00Gzmlk8gp5JQmI6d0RonzRv6b6NRj
oj2DRP4lAbVSYt9As+X1XeOfUJe9MQq7iJqR5DlzTLKukh2uUu5l10q5OeU1
yTmJezFoo7yaK3eG/ZV89kNqo1tUXimau8rrfhCFtUS5l10rJc4b5BRgZErs
G2g2ckrnkVPIKU1DTum8EueNlFCuCBIN/N3kXhJQKyX2DZQg/42w5bXqvP2i
sExUXq0xNtlWycY3K/eCa6XEnJITym8TdlI3Vf6TnZvsrRYHNbA6dOpD6thT
ojBTlHvBtVLivEFOAUamxL6BEpBTOomcQk5pJnJKJ5U1b+x4RRQulUje8J/K
vSSghsrqGyhTziyTH1EX7xGF/5XouKCkd6lyL7JWysop66iPBhXWT9xLQhfk
zJL31O+nPhNUuDIZnbgXWStlzRvkFKAdyuobKBM5pd3IKWg+ckq7lTJvjFkS
haNEfV/5lwTUVil9A0D7lJJT0iwqS8ZEnwgS+ZcE1FYp8wY5BWifUvoGgPYh
pwCwKmTeCBeL2kcNnEvsXRJQX4X0DQBtVEhO+XBQctUOkXsxQN0VMm+QU4A2
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
    "], {{0, 360}, {1080, 0}}, {
    0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> False],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1080, 360},
  PlotRange->{{0, 1080}, {0, 360}}]], "Output",
 CellChangeTimes->{3.73790157224114*^9, 3.737901611832061*^9, 
  3.7379045046776953`*^9, 3.737904546318324*^9, 3.7379053407605658`*^9, 
  3.7379082265648727`*^9, 3.737979747688107*^9, 3.7379800674836617`*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"0b5e000a-bc9d-498d-a9a1-b3726a55da6d"]
}, Open  ]],

Cell[BoxData["{"], "Input",
 CellChangeTimes->{
  3.737821276109035*^9},ExpressionUUID->"3e6f097b-6e92-4bd6-bc83-\
a14d69631e95"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", "imagedata", "]"}]], "Input",
 CellChangeTimes->{{3.737815775813212*^9, 3.737815781546925*^9}, {
  3.737815837201524*^9, 3.737815837497547*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"a9a9341b-b30d-4779-b1f5-7fa1582f5065"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJzt3WmTZVWdwOtz7ydIoIAESsj7DdRue7DbXl/BAQValI4bcV9f1O7WbrvB
l7wsoIAEiqLC6DAIwzAEmakJUcChGWqeK2sesirTbpmU6d7133vtMhEsqioz
1z4nn1+E8cTZZJ1cZ+dg7rPXXvv/+r//3y/+P//nYDA4/n80/2v6bSJJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiQ5/77+Wu5wmlie+1G6797cierjIkmSJEmyj34xOpjGL809lr4aTVcfF0mS
JEmSfXRqX5TGoo1p757cqerjIkmSJEmyT07tz82m8StyO9P45bkX0nvv5k5X
Hx9JkiRJkn3y1mg2LYu2pIlrci+n99/LzVQfH0mSJEmSfXJ/TOeeSWtW517q
jqfL8XXt8ZEkSZIk2SfL/O3Ju3PPp+tvyO3s5nvXHh9JkiRJkn1y3drcqXY+
94bW/dXHRZIkSZJkH/27aDqNxXzuR9M3o4PVx0WSJEmSZB/9t+hEmlie+1GK
20dfeqT6uEiSJMnz8epoJr37Ts59XEnOv9dFx9LYZbkfpG9Hx6qPiyRJkjwX
l1+V253GLs490p0fsu4Pyfn29ddyh7vz0ffdmztRfVwkSZLkx/ET0enuvjOD
ti1N6XPR6erjJDk6fjE6mMbj/brH0lej6erjIkmSJD+O5XzzXStzh9PYRbmH
u/V//iVy3SLJ+XMq7h+9L41FG9PePTnXkZAkSXK4LPehWXZJbnO7fTCIyxcv
25ZWP5BzXprk+Vvetxu/IrczjV+ee6G7n3Tt8ZEkSZLnYvn79rXf5Q6liVhv
7Mft37lPpOZ4+mj1cZIcXm+NZtOWzVF73+iX0/vv5Waqj48kSZI8H/8jOpU2
vRq12weD62N93e1p396c80Ykz939MZ17Jq1ZnXupW5ehHF/XHh9JkiR5Ppbz
0t+KDqWJK3M/bOdhPpXuuTvnvDTJc7fM356M3yPPp+tvyO10XwCSJEmOhHE7
muWn0itN7fbB4Ppoh+sZSZ6zZR2GZj73htb91cdFkiRJzocbN+Rm0+ZNuYNp
LK6P/kF7v9e1KS6bvvxY9XGSHB7/Lpru7gfwzehg9XGRJEmS8+naZ3LTac2D
uZfb7YPBfffmdqZ/iKwPRPLsxjTuG05014t8JnJfPZIkSY6W5bz0F6ODaezi
3Pfb9bzXp8l7cs5Lkzy7sVzhdcfSxHjuofTtyO8PkiRJjqbfjabb4+eX2u2D
war7crvSLZHz0iQ/2tdfyx1urw/5UWrmtZyoPi6SJElyIWzmdc+298M6kMai
NWlFtDHF6aXx49XHSbK/lnkt45fmHktfjaarj4skSZJcSK+Kptv1vH/Tbh8M
Vt2f250ejPvCOi9N8k+divtH7+vef9u7J3eq+rhIkiTJhbScl/5UdKC9znGy
vW76Z+k7kfPSJM9Y7g+9oymNx3r/L7h/HkmSS8h338mdSnfekTuYynm4ZZfk
NneW7eXjyr+rPX5yPnzm6dzJNB7r7v4qDWKe981pVbQn7Y/TTs5Lk/xtujWa
TVs2R+19o19O77+X83uCJMlR8rPRybQy2tIeJ6xo//s51P678jzleWu/PvJC
LH8XP/yT3FSaiPvBrkwr78w9l37/Vs55aZK/7d5XWxPXfbyUro22dPNbao+P
JEmeu+W+Pt+IzsxTHcxz5XnvuD13oPu8C/36yIX0H6OTaTJ6sX2/6Xtp397I
+SaS3fztybtzz6dy//ky37v2+EiS5Nkt739fFm1rty9e5fN6H56j4E3RbLt+
91Q3b2NZrMf7i3RD5L425FJ23drcqXY+94bW/dXHRZIkP9ryfvf18ff8znZ7
vbwPz1F0187ciW79oEHMv7itW5+3yfc7uRT9u2g6jcX1H4+mb0YHq4+LJEn+
qZ+Oyv9P96e546q/n8j5sBwnd+eZ2uPoMo+zHGfXHifJxbfMS5mI++X9KH0m
OlJ9XCRJ8rfp76NTaSzmTf+g3d6fmuujH+rG2Wytv9/I+fTfohNp8q7cL7p5
3mXed5kHXnucJBfP66Jjqfz/4LejY9XHRZLkUrZZH3hz+7i/lft9NI/q7zdy
IYzT0dfMpqujfd26Y/Hn8/iL1qsnl6Cvv5Y73J2Pbq5vMj+FJMnF9O0/5Mrf
4cPT3HHX34/kQnpFdKK7D1a5L1a5T1a5b1btcZJceMv1TOMxX+zx9NVouvq4
SJJcCu7ZFbWPh6flV+V2V99/5GJa7he7p6k9L31zGr8y96t0/3057yuRS8Hm
vtH70opoY9obvxZc30SS5EJY5oeW66kGQ1YZd3kdzdb6+5VcTO+N+0ofT2MX
537W3Z/9U9EB56XJEbbcl2JHU5q8J/dCe92H+8qTJDmfXh8dbx8Pb9+Jjlff
n2RNN6zPzaQ9u6Pu53rV/blfJ9c7kKNreZ+srGOy5sHcy+n993KOo0mSnA9v
j/leU+3j4a1c/9k8qr9fyT74N9HxNHZR7tl2/e416ZGHcwfav6+dlyZHyXJ9
x0Scf34pXRtt8fNOkuQ8+MVoU/t4eJv7OurvV7JP3hLN/Mk6B2seyP23dYfI
EfS9d3Onu/vIN+t07+zme9ceH0mSw2j5/9XBkDd+ee6F6vuTHAaffCJ3LE3E
ugEb2uumv9+t57txQ87f1+QouG5t7lT38/5Pcf/4/dXHRZLkMDoe98N5qn08
vDXrDj9dfX+Sw+TXo5nuvNSgrVw3ufaZnPPS5CgYt6u4ajqNxX3vHk133pE7
WH1cJEkOg2X+Vrl/7GDIK6/DvDTy/P3r6FiaWJ5bm8bivrI/SJs35ZyXJkfB
G6IT7c/5j9JnoiPVx0WSZJ91/Ezyoyz3vYnbYk3u6H4/NPeXfSXFn93L3V+W
HGbL+2XlfbLmvlfHqo/ro3z3ndyp9Pu3csfT66/lDneW7eXjao+XJDmamr9N
8mw+8XjuaCo/Z+W+61+KDnnfihxit27JHe7ORzfXc5yoNp7/jE536zHEr5vx
F9v//vEr/648T3neWq+LJDkaWj+M5Md1397c6XT9dbnt3e+NO27PvZpujJz3
IYfR7ng1zkc/vmjr8pf33/4iOtS9PzeY5ybi/b8fdp/H+34kyfPR/atInq9/
FR1NzftXT3Tnr177Xc7fp+QwumZ1bl9qrtfYmPbuyc3/+2LlfPArTe32xWvu
562/30mSw+Ht8f+PU+3j4e3hn+Smqu9Pcim6Ou4jfTp9JdrW/T5ZGev7buru
n1N7nCTPbnnfa0dTe130C926CBf6/OX3RXneQS+qv99JksPh9dHx9vHw9p3o
ePX9SfK36fHHckfS+KW5x9JY9JP0z9Fh56XJIfDWaDatvDO3OZX72r3/Xu7c
j6PL8ff5Xs+8sNXf3yTJ4fCaaHbBrjda6Mq4y+tottbfryR/m74WnU7Xfjm3
tfv9smVzZJ1ccgjcvy83kybi+PeldG20pT2e/vj/v9u8X39mPf9+VX8/kySH
yz27ovbx8LT8qtzu6vuP5NmN09GXHkljl+R+msYuzj3S3X/GeWmyv773bu50
u77Y8+063TvP+nP7r9HR9nFfq79/SZLD5e44fD7ZPh6e3v5D7mT1/Ufy4/uJ
6HSK27Yv29L93tnSlD4Xuc8M2UfLegYTMe9rQ/qnm3L7/+TjmmbTeLzP/Uz3
c97P6u9XkuRwWq5zGvS8Mv+zeVR/v5E8d8t5q7tW5g6nsYtyD6exOK5+NP1L
dKT6OEn+qXFYfNV09/N6Z6wXeLD7780878Pt475Xf3+SJIfTuP3M8lNpLOZn
/aDd3p/KuP4+ct0kOUqW81rLYn73mffx4sf+sm3d/W5qj5PkGW+ITqRyf+Vy
nUY/1wn7qOrvR5LkcPvpqLyP3J/mjqv+fiI5/5bz0s387sPtukU/bq+7fDy9
8XrOeWmyT/51dKw9H/1f7fZhqf7+I0kOt+Xv1/Ercjvb7fW6Pt7fPvs6JSRH
z/+ITqVNr0bd76Pxy3Pb0/p1OeelyT44eXfuzH3gh6P6+40kORqW+1Ns2xq1
2xevMm/zXO+TQXL0LO+ffSs61M0Xbd7ne+oD6/zWHy+5FF0Z10Fvah8PS/X3
G0lytCzHr1+IDrT3i55s//v8VZ73G9GBtHFDznEzyT+1W68h1h07c1663Ge2
3G+n9jjJpWS53mIwVNXfbyTJ0faz0cl2fc0taRDHvbe1//0cGsut6J6nPG/t
10dyeCznpX/3v7mD3fqH5b45Mc378mPVx0mOshvW52bax8NW/f1Hklxa7t2T
O5W+GR1MN341tztt2RR1lu3l4959J2cdbZLz557duekUb8+NvdJuP7OOwj9E
M9XHSY6Sc++LMWzV338kSZJkTcv1H1+MDqaxi3Pfb+eXrk/fjpyXJufDp5/K
nWgfD1v19x9JkiTZJ78bTbfHzy+12weDVffldqVbIuelyfPR8TNJkiQ5epb1
EJv7YR1o53mvSSuijemtN3POS5PnovnbJEmS5Ogby4xdNd2u5/2bdvtgsOr+
3O704Oqc89Lkn9P6YSRJkuTS8U/u0xfH06vSittzz6bvRMerj5Pss+5fRZIk
SS49n3k6dzI110f/KjX327s5rYr2pP37cs5Lk3/syjtym9rHw1L9/UaSJEmO
grdGs+nVV3JTaWJZbmVadknuubRzR855aTL7jehA+3hYqr/fSJIkyVH0H6OT
aTJ6sT0v/b20b2+U3n8v57w0l6bDuQ53/f1GkiRJjrI3RbPpk9FUexy9Ii27
NPeLdEN0ovo4ycV0an9uNo1HL7bb+179/UaSJEkuJf/w+9yJNH557oU0iOOH
29JUXCe9L10TzVYfJ7kYXhsdbh/3vfr7iyRJklyKNs2mf4rz0/u74+jJu3PP
f2B+a/3xkgv5czAe94d7pt3e1+rvL5IkSZK/TffdmzuRJu/K/aKb593Mc93f
zQOvPU5yIfzX6Gj7uK/V308kSZIkz1jmb8ftca/e1607Vq4T/Wx0svo4yYXw
+mhH+7hv1d8/JEmSJD/aK6ITKW6Htezn3X2xbl+Rm3JemiNl877RTE/XFau/
f0iSJEme3f2xvNhM2tPUnpe+OU3GvO9fpvvvyzkvzdFw9QO502fW2etF9fcL
SZIkyXP33riv9PG08o7cz9JEnK+bTJs35Q5WHx85H/5ndDq90tRuX7zmft76
+4MkSZLk+bthfW4m7dkdfWAdpvrjI+fDcr/oS6JD7ftFD7X/ff4qz1s+T/m8
C/36SJIkSZJcCMt56Yujg2nynty5z/Mu/648T3ne2q+PJEmSo+mt0Wy7bu7x
tPLO3KFufas9u6LOsr18XPl35Xlqvx6Sw+u77+ROpd+/lTueXn8td7izbC8f
V3u8JEmSHE3LPMYyP3jy7ty2NHZR7uH2486/8jzlecvnMX+SJEmSJNlny3Hr
ddGxtCrWd/5V+98Xr/J5yzgcT5MkSZIk+2BZj6qcBx70rDKuMs5ma/39RpIk
SZJcGq59Jjd93uvwLHZlnGXczdb6+5EkSZIkOZo+sCp3Ko1flXum3T48TSzP
rU3r1uasB0SSJEmSnF+/Hs2kuN3p+Ivt9uFtMnox3RKZ102SJEmSnB93bIva
x6PT3NdVfz+TPGNZ/2/f3tzpTusCkiRJso+W+58ORry5r7P+fidH2XL/9ntj
Hsjx9MloKk1ck3s5jV+ReyoNxnIr/vT3T7u9fFz5d+V5yvO6TzxJkiQXw3J+
Jy4XXv6bdvvotuzS3C/Ssuhw+kZ0IK1+ILe3s2z/y+hwd5+sf4jMAyc/zPLz
senV3IE0cXVu/YL/Ximf53//J3eguw7lQl8PSZIk+cfeEJ1oH+usxXXht6VV
9+d+3f6dvi/FMmtXWe+bS8vy/ttdK3OH09hFuYer/z4p4yjjMg+cJEmS82E5
3zrQvHTtl3Kb2/XXzBPnaBqne6+eSc18jq29//1x7ZdzW7txN1vr70eSJEkO
l2MX537WPtZ8V9YtK+shNVvrf93J87HMzy7zLwZDVrlOxXUYJEmSPBcfXJ0r
fz9qoSv30d6xPXes+tefPBfffy83k5Z/IvffQ/97o7yO8rqarfX3M0mSJPvp
V6Nyva4Wq4k4/7UqvflG7mj17wPy47gm3m/bN3K/L6b2RdX3L0mSJPvt3Otz
tdiV4+jLI+ej2U+vjE5+9P2lhr32dX02Oll9f5MkSbKfOn7uR2Wd4HffyZ2q
/n1B/rFfibaN/O+Jybtz26rvb5IkSfZT87f7VdxmZ+UW99lhL3zv3dzpFKdn
x9aM/O+J8jqtz02SJMkP0/ph/ey6yHxu1nXrltzhJff74fXXcoer73+SJEn2
U/ev6leXReaRsq63r8hNLbnfCw//JDdVff+TJEmyn65+ILe3fazalXmkZf5s
s7X+9wmXlvfdm9u55H4vzH3d9b8OJEmS7Jc3RCfax+pLTzyec38r1tHxc67+
14EkSZL9sqxXFbdTWv6bdrtqt3lT7mD17w8uTc3fztX/OpAkSbKf7tyRcz+r
vrRvb1T9+4JLU+uH5ep/HUiSJNlvd2yL2seqleNn1tT9q3L1vw4kSZLst1+P
ZtJ49GK7XYud+dvsg1+JRv/9tMm7c9a9J0mS5Pn5wKrcqTR+Ve6ZdrsWK+uH
sQ9eGZ1MzQnaFaP3e6B9XZ+NTlbf3yRJkhxu1z6Tm07jl+deaLdroXL/KvbR
Natz+0bu539qX1R9/5IkSXK03LA+N5PmznPUfHdZZB4p++X77+Vm0vJP5P57
6H/+y+sor6vZWn8/kyRJcrQs97v66+hYWnVf7lftf9eFdl10rPrXmfww/yGa
Savuz/166H7uy336yutottbfryRJklwaluPpZp2ho916Q8085J+0H6ezdW20
pdufzdb6X1/ywyzrVC+7NLe19z/nZZzW1yZJkmQfvSmaTX8THU/fig6lm6Op
tGdX1Fm233F77kCaiPW/H2qfb3Qbuyj3cHr3ndyp6l838lws7/f8c3S4N++b
lXGUcXlfiiQ/nuX35Ttv56bTW2/mjqXXfpc71Fm2l4/ze5Yk6xrLlV1+LE3E
fMtV7fbRqbyu8jqbrfX3O3khlnnRjzycO5Am4jrjdQv+8zsR55XXp02v5g50
9+G70NdDkqPu3j25Uynezr/oQFp5Z+659r9//JZFP0+fig50z1v79ZHkUvPN
N3JHR+Y4uryO8rqarfX3M7kQ3hrNpu9Ex9vz01Np4prcy+195p/86PtjtdvL
x5V/V56nPG/5PLVfL0n23TUP5ma79xvLfT8G89zYxbnvp//9n9yB7vMu9Osj
STbu2J47lsbjfrRPt9uHp3If7fI6mq319yvZBzduyM2m9etypzvL9trjI8lh
t5wPrnUfhfJ5nZcmycV1397c6aG5j1YZZxl3s7X+fiRJkqNvWV+lzK8eVK6M
w7ovJFnHZl7n8bTsktzmdnu9yjjKuJqt9fcTSZJcOq5+IHc6rYzqHzd/sDKu
Ms5ma/39RpJLzbf/kDvZ3qdmX1oe86Z/nQZxPHtb+3EXUPs85XnL54mHV01X
f/0kSZJ335Xr//0Ft22Nqu8vkuRcy7rA10XH2nlMh9MXogPpxq/l9naW7eXj
yr8rz1P79ZAkSX7Qz0RH2sfD05ejI9X3H0mSJElytN2/LzeTxi/NPdZuH57K
uMvraLbW368kSZIkydHyL6JD7ePh7UvRoer7kyRJkiQ5Wpb7/PVlfe0Lrawr
NrU/5/6FJEmSJMn58aknc+V+H6PT3NdVfz+TJEmSJIfbz0dT7ePR6eZoqvr+
JUmSJEmOhmPRK+3j0al5X+CV6vuX82vTbNq7J3cqfTY62Vm2l4+rPV6SJEmS
w++aB3OzaWI8N9luH53K6yqvs9laf7/zz7v6gdzpdEl0KI1fntueVkQbz/n7
tPy78jzlecvnqf16SZIkSfbfz0Xl+GF0+1rkOKmv/nt0MsXbHeM70sTy3KoF
/75s5l2s6T5vGceFvh6SJEmSo+czT+fK8cLotntXznFRX7wlmkl7mtIgjl9v
68334djFuUfa4+oX08TVuZfS57+QezVt2Ryly6JtaTLakfbE99mudGO8X7O3
nfewP10UHUifjg6mb0WH0l2xTvzhtG1r7kiK0+OXH0t/Ex1P/xadSPfflzuZ
9uzOTad338mdSv8QzaSbIvMrSJIkyYW0/J0+GPHmvs76+32pemN0Kq28M/dc
77/vmuPo73f3dWse/yyNX5l7Oo3FcfHDi3a+/Ky170NMxPh+2M5Xf6Jd32Bj
WnZp7hdp8t7cL9Oa1bmX0qZXo/Z1bkmTd+e2pR1N6cav5na38933ts83lT4V
HUjfjA62X9dDaeuW3OH0xuu5I+mvo2PpO9HxdF98/hOpvK/1ztu56W4+zNej
mXRr5H0BkiRJ9kPHz1wMvxtNp4lP5NYN3fdbc/55fVp1f276I19nuY/6g3Fc
OpP+Mzqd/j46la6KptOunbkT3X3jvh0dS38VHU1xmHvpkfY896H000dyB9M3
ogPdevkxrKv3teeld6frb8jt7K7zbu6DviV9MdrUng9/OS2Pcfw6jcf58+fb
9wGeTeNX5J5qz7f/uDfrIkzEcf3KblzNvIAnu3FP3pX7RVoV5+l/1b3OeLvj
4k3dftixLer2U/P13N3tx09GU91+vvOO3MHu6/D6a7nD3depfN3ujfkHx7uv
69t/yJ3svu7l+pHyfWE9BpIkyeHU/G0upNdEs2nyntwLQ/99VuZzl9fVbK2/
nxfacrxX5t2X88Rx2n35qe488tNP5U5055mvi46189yPduelH/1p7lB33jqm
xX/hQHdee9/eqDvv3RzX7+zOi18bbenOm0/E1+Pldl7Ar7rz7HPXjXuinSfw
o9Rc+L6i+vdjmbfQvO6fdPMaVtyee7Z9vc+3x/m/7u6TsDKO6zelLU3p+tjP
29vz+jvbr8ue9jz+vlTu43dHPO+BtHlT7mB67Xe5Q+kz0ZH0lejM+wLl+oBm
tPW/D0mSJGtr/TAupOU64MGIVeYxN4/q72een2V+eDlOjOkRnzjdXWde3l8s
16FfHx3vrlMv89MfezR3uLuuvTnff7C77n1qf9T9PDTn/3d31803x63buuvq
m+PcV7vr7st8++Y8+s/b9ws2tPMHHm/nCTw07+sI/OH3uRPVv04kSZJ90f2r
uBA282Fn0ljMu/2vkfu+Govjlh84P8de2Rynz3b3PS8/h+V+6GufyU1368zH
NPYbTrTz4Y+nN9/IHU2PP5Y70v372q+LJEmyb5Z5gYMRq7lO9JXq+3epWeaH
Dka8ua+z/n4nSZIkufCW9YgGI1a57q95VH8/LxWbea47Ru776YOV+bfNo/r7
nSRJkuTCW9YBHoxYc19X/f28VCzrHw9GvLnzNurvd5IkSZILb7nvTrnP7WDI
K+vslOsBm6319/NS0fEzSZIkyVH3L6JD7ePh7UvRoer7c6lq/jZJkiTJUXf/
vtxMGo/7pz7Wbh+eyrjL62i21t+vS03rh5EkSZJcKsZh6KVH2sfD02eiI9X3
31LX/atIkiRJLjXvviu3tX3c37ZtjarvL871xq/l9vb+++dcW/1Abm/1/UuS
JEmyPzbHCad7u65YWSesjLPZWn+/sfGaaDZN3pN7oXffP+faePRi97qarfX3
M0mSJMn++O47uVNp5Z2559rt9SrH82Vczdb6+4kf7nej6TTxidy66t8/51oZ
d3kdzdb6+5UkyYV07TO56fTa73KH0prVuX2dZXv5uNrjJcm+uXdP7lRaHscT
/91uX7zK5y3jONt42S//PurP+zBnq4zzxsj3G0lytH37D7mTaUtTam7UeHP7
3/9M8XHf6/5deZ7ar4ck+2Jzf9/Z9MjDuQOpuQ/umva/z1/leTe9mjvQfd6F
fn1cWG+JZtKqaE9qJkbfNu/fP+dcO449Td04m/9Yf7+RJLkQNuvIHEkT8f+D
D7Xbz7+JK3M/TG+8nrOuK0l+0HVrc6fS//w2N3Xe5xfLvOyLogPd89Z+fVxY
/z06mXZsj9LE8tyqc/7+OdfK5ymft4zjQl8PSZLD4GLdb2Xu56n/ukmyb07t
z82md97OTae33swd666TKZbt5ePKv6s9fta1rAd3SXQo7dgWtfMcNrYf9/Er
/648T3le684tjp+LTqe7Yr2/w+n6aEdaEb2SJmOd/190lu3l48q/K89T+/WQ
5LB7Q3RiweYPfrDyecrnvdDxkyTJj29Z/7rMT/hsdLKzbLdOdh2/Gk2nZr3y
HfM3P799nvK85fPUfr0kOSzeFM2mZfE+8uKvQ1LmJ5ZxnG28JEmSo2aZN/LF
6GCaiOswVrb/feEqn+eb0UHzV0jyLJbf04PKld/bzaP6+4UkSXKh3bghN9vN
sx5UroyjjKvZWn8/kWRtm2bTeFyH/Fi7vV5lHGVczdb6+4kkSXKhbO7rtad9
3J+6dd2j+vuJJGtb1tce9Czrc5MkyVH3nrtzR9vH/W17LBd3tPr+IsnaNtcd
b24f96ctm6Pq+4ckSXK+LfPsVtyee7bd3t/KOM0PJLlUvTWaTWOxXsR/tdv7
09hluR+kNQ/m/J4mSZKj479G/T/v/MHmni+vvx9JcrG8MjrZPu5v5f4ZzaP6
+40kSfJCnbwnt719PDzNHXf9/UiSi+WXokPt4/72rehQ9f1FkiSHz/ffy820
63Odqj6e4vjluRfax8NTc/z8QvX9R5KL7dS+qH3c3yauye2vvr9IkuTw+YXo
QHqlqfp4imMX5R5uHw9PYxfnHqm+/0hysf3HaFf7uL+tui+3q/r+IkmSw+dT
T+aOp7KuSln/pfa4HD+T5HDZ3Ldqa/u4v8X/3V22rfr+IkmSw2dMY7tmNk0s
z61KTz+VO1F9XOZvk+Rw6fiZJEkuFdeszr2UPh0drD4e64eR7Kvr1uZOpUuj
I+nhn+SmOsv28nG1x7tYmr9NkiSXil+P9qVrv5zbWn087l9Fsi9+N5pOW5rS
YDx329l/P43lVqRlcTy9tXue2q9nobR+GEmSXCqW477xuH/n02lqf67eddBN
s+110M+22/vbittzz3bjbrbW/7qSPH+3xuHy4TQRx8sPXfDvofI85Xlrv775
1v2rSJLkUnHf3tzp9vFgsGd3rv55krnnc/vbE4/nnHcmR8G5x7cL1+uv5Ubn
ODrefr3y5ILvtwvts9HJ6vuLJEkOv+Oxrsrz6dqoP3/XNfen3tM+7k+roj3V
9w/JC3fnjtzxNLEst3LBf9+Uz/P7t3LHq7/+C7Xcv2EsXtd/Lfj+O9fKuPpy
nwmSJDn87toZddYeT3Hjhtxsuj7a0W6vVxlHGVeztf5+Innu3hTNdu8fDha5
yZhn83w3jrONt++uvDO3edH349nasjmqvn9IkuTo+M/R4TR5V+4X1cfzQct1
2WWd8MU+T/TF6GD168NJzp/fjMp9B+o1dxz198v52tzH6kj1/fnB3ng9d6T6
/iFJkqPjO2/nynXPg8H6dbnT1cf1Uf5dNJ12bI8+/rq4Z6t9nvK85fPUfr0k
58/yPlhzvvS5C/+9cYHF23TLfj7078+VdRTHY93xx6rv1zIO6zuSJMn5tvzd
VtbhHrb7MX0uOt2dR4/D4PEd6fPRK+19ZH7RWbaXjyv/rjxP7ddDcuFsfu7L
dcf96W+i4b8euszXOfsrXthG5bw+SZLsr3fH/O2t6epoX/XxkOR8W+57P+hZ
c8dVfz+dr+V67mWX5Bb//H6ZVzAq15WTJMn+Ws4bTMTx80vVx0OS8+3c32/9
ac3q3Oj83v3b6EQai9Ys+P4un+eG6ET110+SJEffZv3tE2lieW5Vuiby/j3J
0XEs1tv+Qfu4P03EvPKHqu+f+Xbu/a4Xrrg851LrhJEkycWz3B+z/B331JO5
4b8ejyTffy830z7ub6P6vuXjj+WOpLnvE5x/5Xnmrvtd/3WSJMml5+e/kHs1
fSo6UH08JHmhPrAqd6p93N/Wrc2dqr6/Fsq3/5A7mVZGW1Iz8frms39d2o8r
/648T+3XQ5Ik+cloqr2/y+bq4yHJC9Xxcz9ddX9uOm3ZnDvUre9WLNvXPpNz
P0GSJNk/J+/JHUtjsX7qT4f+vqQkaf42SZIkF8Jbov//78y4vuy2tHtXzjw5
ksOv9cNIkiS5EI5fmftV+lZ0qPp4SPJCdf8qkiRJLoRxG6vle9KO7VH18ZDk
hVquqx30rLnjqr+fSJIkeW7+S3Qkrbg992z18ZDkhRrTpMfLffn6099E7hdI
kiQ5rO7dkzuzXu277+SWzrqwJEfPsh5ic3+B59rt9SrjsE4jSZLkaFjOP2/f
ljtafTwkeaF+MzrYPq7X3HHU3y8kSZK8MPfvy81UHwdJzpc3RbNpPNbjfr7d
vnhN3p17vhvH2cZLkiRJkmRNd+7IHU8Ty3Ir2+0LV/k8v38r53pnkiRJkuRw
uXVL7nD7eOF6/bXc4eqvlyRJkiTJC/GxR3OH00Ss0/1Qu/38K88z9/i8/usk
SZIkSXI+/Go0nbY0pUEcB9/W/vc/U/tx5d99N5qu/npIkiRJklwM163NnUpl
/vXtK3JTnWV7+bja4yVJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkhx2p/bnZquPgyRJkiTJPvu7
/80drD4OkiRJkiT77NhluR+kVffnpquPhyRJkiTJPjp2Se6naeLq3EtpzYM5
87n54b7/Xm4mvfN2brqzbK89PpIkSZJcKL8cHWkfDwZfiA5UHxfrWK6Hn7wn
dyzt2hmlieW5td33yUdVPq78u/I8rrMnSZIkOSp+JdqWJsZzk+nfo5PVx8XF
8YroRDcPYTDPrVmdeyn9bXSi+uslSZIkyfN1/brc6TQex1FPpcnoxdTkvOGo
Wc4H33lH7mAajOVWtP99AWs/z08fyR10XpokSZLk0PrE47mj7ePB4J9uyu2v
Pi7Or7evyE11X+dazR1H/f1CkiRJkufq9TfkdqZBzOe+LcXDG8y7HXYffyx3
5nr3vjR3XPX3E0mSJEl+XL8ezaSYbju2Ma2Mfp7278tZZ3nYLF/P8ctzT7Tb
+1O8TTP+ZLol8v1FkiRJcvhsjmuOt9fH3pxujPZUHxfPzeZ9kPrztc/WJyPz
uUmSJEkOr6uiPd1xdHdc3ZPx8cMt63PFZcYrNrbb+9vYRblnrStGkiRJcmgt
87bLPO4yr7vMC649Pn64n43KfciGp7njrr8fSZIkSfJc/bfoRLeuWHO/q53V
x8UPd+uW3OH28fD0+mu5w9X3H0mSJEleqM382nJfq8Fg7n2v6o+PjXfcnjvQ
fZ2Gpbnjrr8fSZIkSfJ8jdtC3zTbnn/+ZSrrJ69+IHe6+vjY6PiZJEmSJPvh
/fflTqaJ5blVadvWqPq42Gj+NkmSJEn2yw+e57w0OlJ9XEtd64eRJEmSZL9c
82BuNq1ZnXspjV2ceyTt3ZM7VX18S1X3ryJJkiTJfrr2mdx0Grss94O0ZVPk
eKiyzf3GptrH/e2T0VT1/UWSJEmSi+Ul0aH28WDwrehQ9XEtVct9uscvzz3R
fV36Ull/7pbI/cRJkiRJLh3L+eaYxn3xpjQRx0cPpT27c9PVx7dUffyxXLku
vT/NHVf9/USSJEmSi+0Dq3Kn2vnDP2mvk345bdyQM5+7lrfH9dD153PPHUf9
/UKSJEmStX3s0dyZ+yhtejXn/r61LPMDvhkdTIN4f2NF9/VZsNrPc+cduYOu
iydJkiTJD1iOk5bFfa22dveL3r0r5z5Ftb0iOpEmrs691G6fv8rz/m10ovrr
JUmSJMm++5/R6W4dq/Erc79KN0XOQ9a2vM/x7ehYuu/e3M40flXumfbjPrry
ceXfledxnpkkSZIkz8+vREfbx+5bNCzu35ebSe+8nZvuLNs/7r//l+hIuvbL
ua1pWfTzNBHvp/yws2wvH1f+3cf9fCRJkiQ5Kl4f7eiuv336qZz5vaNiOe/8
mejIxz6Pfbaa+f9rUxxWf/mI89skSZIkR964LPbqmfa62/Vp8q7cL9L77+Wc
XxxWy3z8HdujdvvCVT6P6wBIkiRJjrpPPpE71j4eDG78Wm5v9XHx3Lw1mk3L
Lslt7r6ei9W1X8ptbu+T5jiaJEmS5Oi66v7c7nY+983pO9Hx6uPix3PN6ty+
9nG9puL66H3V9wdJkiRJLpQb1udm2vOXz6Wxi3LPplsi87n76u/fypX3OfpT
uS9X86j+fiJJkiTJ+bY77onz0N9LsRzzlbuqj4sf7qZXo/Zxf7o42lR9/5Ak
SZLkQjt3Hu5gELeNvvxY9XGx8f77cie7r09fe+bp3Mnq+4skSZIkF8qm2TR5
T+6F7v5H+/bmTlcf31L3U9GB9nF/+0J0oPr+IkmSJMmF9rPRyTSxLLcy7dgW
VR/XUvfzcVzav3nbH2zuOOvvN5IkSZJcaP/nt7mp9vFgcHfcL/pI9XEtVVfe
kftZ9/Xoa2U9uuZR/f1GkiRJkgttua/vqug3aSzORz+aPhGZz73YTizP/ah9
3N8mrs79uPr+IkmSJMnF9qvRdBqL9ZW/n1bemducpvbnZquPb6no+JkkSZIk
h8M7Y/7wwfbxYPDa73KHqo9rqWj+NkmSJEkOhxs35GbT2EW5V7vzoX8fnao+
vlHX+mEkSZIkOVzeGJ3qjp9XRK90x9e1xzequn8VSZIkSQ6nfxkdbh8PBl+M
DlYf16h6/325k93+7mvPPJ07WX1/kSRJkmRfLOuHxbLcy7Z064v9XTRdfXyj
6qZXo/Zxf4ov/8Wbqu8fkiRJkuyrn4tOp/FLc4+lmNa9/Dfp1sh87vn292/l
jreP+9MV0Ynq+4ckSZIk++62rbkj7ePB4OGf5Kaqj2tUXbM6t6/b37Wa2hdV
3x8kSZIkOWxef11ue5qIed0r05WR62Hn23J+v7lf1OZ2++J17Zdym9OaB3Pm
GZAkSZLkufreu7nTafyq3DNp/PLcC+mayHHWfHtTNJsm78ltb7cvXDu2R93n
vdDxkyRJkuRS96+jY+3jweDrkXm+C2VZzy0uQ7/0SPf+xeACa+5TtjZ9JjrS
fZ7ar5ckSZIkR81/jHalwVjuex9Y/6r++EbV/XFZ8kz6cnQkLYvj6q1p5Z25
59LEeO6hzrK9fFz5d+V5ynzx9etyp9Oe3bnptGtn7kRqzksfS2+8njuSXvtd
7lC7XviBtGF9bqb6fiFJkiTJvnpLNJNW3J57Nq28I/czx1PnaJn/XtY7L/cJ
uyE6keKy8+uOdce9cXnylw6lb0QHUlnna8+uKO3YFnXXT09cnXspjV+Wez5N
fCK3Lk3E9es/bMfxR8X7ITe3/+7Hreu7+foTMd6XU7lOuhx3196PJEmSJNl3
753MHU/luGt5zC/eXX1cZ7PMV34w1rueSQ+syp1KzzydO5meejJ3PD3xeO5o
2roldzht3pQ7mF59JTeVVj+Q29uer93Zrle+tbufc7nvV3M/7Z+nOC08/mSK
3TW2ph3PHxX//bY0Fse/P+3en5i8N/fLtCJ6Ja2MtqTY/ZM70o3RnvTJaCp9
OjqY/jI6nOLw+bKj7ec/3q3/9s7buenu+vaNG3LmcZMkSZLkQlmOIwdtzbpX
x6qNp5wfH4/7F/+yOw4di+PYR9vj/RXdeEvluLYc55b5z6vuz/26Oy4ux8n3
xXHtzu71l+Pqnz6SO5geezR3uDsOL8fl99+XO9kdt5fjeNchkyRJkuRoW+Yh
f3CecEz/vXrx53OX+y+Vec9l3bO/jU5086TLvGnriJMkSZIkF9Oy7lQ5v1vu
i1R7XCRJkiRJ9tGbo6n28WBQrr+tPS6SJEmSJPtkuS9Ss57Yr9t53Y+nr0XW
ayZJkiRJ8o99+w+5k91602XdaOtkkSRJkiT5p14cHWwfDwb/HB2uPi6SJEmS
JPtkua9wcx76lTQR63L/OP1HdKr6+EiSJEmS7JPvvJ2bThNX5n6Y7oj7Mr9q
PjdJkiRJkh/ioz/NHWofDwabN+UOVh8XSZIkSZJ9spxv3hLHzZvS2LLcf6Xv
RtPVx0eSJEmSZJ/cuyd3Ko3F+mKPpDUP5P47rXkwZz43SZIkSZJ/7GeiI+3j
weBT0YHq4yJJkiRJso9eFm1LE+O5yfTv0cnq4yJJkiRJsk+uX5c7ncavyD2V
JqMXU5P53CRJkiRJ/rFPPJ472j4eDP7pptz+6uMiSZIkSbKPXn9DbmcaxHzu
21I8vOFE9XGRJEmSJNknvx7NpLFoY4rbXC37edq/LzdTfXwkSZIkSfbJOP08
fjwN4jj65rQ82lN9XCRJkiRJ9tFVUTluHgzeejN3rPq4SJIkSZLsk2Xe9sro
52nimtyG9A+R+dwkSZIkSf6x/xad6NYV29FUfVwkSZIkSfbRqf1R+3gwuOfu
3NHq4yJJkiRJsk/GbaFvmk3jV+R+2a4z9mRa/UDudPXxkeT5evdduSPpqSdz
x6uPhyRJkqPh/fflTqaJOH6ebP/u3Fp9XCR5vo5dlHs2XRntqj4ekiRJjpbf
iA60jweD11/LHa4+LpL8uJZ5NWV9hztuzx2oPi6SJEmOlmsezM2miatzL7Xn
bx5O69bmTlUfH0mezVX356bbx4PBG6/njlQfF0mSJEfT8vfn2GW5H6QvRpva
9cZmq4+PJD/K66JyX/vB4LPRyerjIkmS5Gh7SXSofTwYfCk6VH1cJPlR/u5/
cwfbx4PBLZH725MkSXJhLeebL442teuLPZT27M5NVx8fSX7Q5Z/I7U3jMX/m
8erjIUmS5NLygVW5U2ks+kmauCb3ctq4IWc+N8n5t2k2lXUMd2yPuvUZimV7
+bhl0ZYUv7ZW/ab66yBJkuTS9LFHc2U97sHgkYdz1rUlOX9u25o7ksYvzz3R
bj+H4n2+Fe16iC9Xfz0kSZJcmpb53MsuzW1NE8tzq9IzT+esz0Py3C2/V5rz
xXva7fPXnibrH5IkSbKK/xmd7s4PTd6b++WZ+672ZJwk+29zXchU+3jh+mQ0
Vf31kiRJcmn6leho+9jfpyQ/vm+9mTtzn6nFKpZBHD9e/fWTJElyaXp9tCOV
6w6ffip3ovq4SPbPWH7wmtm0LO6P91y7ffFaeWfuuW4cZxsvSZIkOZ/GMrhX
z7Tr4a5Pk3flfpHefy/nvqskz3htdGYdwlr9c3S4+v4gSZLk0vTJJ3Jn5mOW
+7DWHhfJ/hjLDi4v95Wq19xx1N8vJEmSXJquuj+3u53PfXM7v9v1huRSttxH
ftCz1q3Nnaq+f0iSJLk03bA+N9Nd3zh2Ue7ZdEtkPje5FP1MdKR93J++HB2p
vn9IkiS5tP39W7nj7Xno76VdO6Pq4yK5+M69nqM/3fi1nOtMyD5a1lF55+3c
dKf1VUiSo+ya1bl97ePB4M03ckerj4vk4nn9dbnt3e+BvjR5T2579f1DLkXj
7auvnU6P/jR3KG3ZHLXz1h4+6++L8nHl35XnKc9b+/WRJHk+Ns2m5u/UF9L4
lbmn0769Of//Ri4Fvxhtah/3p7njqr+fyFH2P6PTqcz7GLs49/15/71Qnrd8
nvJ5F/r1kSQ5n342OpkmluVWpsm7c9uqj4vkwuv4mVy6/lV0tL3P5Y8X/fdA
+bxficx/I0kOl//z29xU+3gw+JfI+j3kKGv+Nrl0nNqfm23d37uf+1iWZWyq
G2eztf5+I0nyw1zzYG42xe1sVv0mjcU63T9N776Tcx8ZchS1fhi5dLzj9tyB
3v28f7BHHs4dqL6/SJL8OH41mu6uf7r2S7nN3g8mR1D3ryJH33viuqyj7X03
bu7dz/uf1I6zG3dUfz+SJPnnvPOO3MH28WDQrKN5qPq4SM6fD8R8kzK/pD+t
W5sz74W8EDesz82kiZhnsq53P+dnq7k+en3avy/nvlgkyX67cUNutr1fxatp
Itbn/mFaHvm7lhwlm5/r37SP6zV3HPX3CznMfj46s67JsDb3ddTfryRJ/jlv
jE6lifi79kft/x+/0h1f1x4fyQv32uhw+7he/xwdrr4/yGG2/P/zePRk9Z/r
C238itxT/u4gSQ6Vfxmd+fv609HB6uMieeFeE82mZbFu4HPdz/litfLO3HPd
OM42XpIf7b2TueOL/nO80D31ZO549f1LkuTHsawfFreJXralW1/sqmi6+vhI
XrhvvZk71j5evOZ+3vr7gRxm/+mmXP/uT3WhNfcJ2V99/5IkeS5+LjqdxuI4
+tG06v7cr9OtkfNG5ChY7sM6WOA+GbmukZxPd2yPFvznd7Fr5qPvqL5/SZI8
Hx9/LHfmvje3r8j5O5gcBct8k+Z+8Hu6n/P5qjyv++KR829Z93MwYn3+C7lX
q+9fkiQvxPHLc9vTRJyPXplime4rT1YfF8n5s7xf1vy8P9Fu//iVf7dta859
ncmF1PEzSZL9dd/e3Ok0HtdBP9P+ff2CdYDIEbT8XG/dkjucJu/Jbf+T+181
55d/032c3wfk4mn+NkmS/fevozPrDl0d7as+LpIL766duRPdz/+TT+SsB0bW
0PphJEkOj/8Y7UqDWH/oe2nnjpz7TZCj7L9EZ9ZDaM5Hn6o+LnIp6v5VJEkO
j7dEM2nF7bln2/tc/Sw9uDo3U318JOffT0UHunUQmvNE5muTNdy4ITebmvnO
T7bbh7fxK3JPda+r2Vp/P5MkOZ9273/Heeib055dUfVxkZx/77s3tzOtvCP3
s+rjIfnb9Plo4e9Dt9DNfR319ytJkgvp6gdye9vHg8G3I9dFkqPkK00ppptc
vKn6eEj+Nm1Yn5tJE5/IrWu3D08TsY7K+rR/X878NZLk0rCsuzt+We75NBHX
Ra5N772bO119fCQv3Lj9+4qNadV9OfNMyD75r9HRbj7YoO+147zn7tzR6vuP
JMkaduvzxv8vrujue1N7XCTP31jm96bZ1NxY5rb0yMO5A9XHtdQt15/fEJ1I
d8R6FAfSjdGeNBnHJdu6eQPFsr18XPl35Xlc1z7clq/noOf5PUKS5Blvjs5c
j/XG67kj1cdF8tz9bjTt57mSU/tzs+ny6Fi6+67c1nbdxke6r8t8VZ63fJ7y
ecs4Fvr18sIsX6fG/t3fqozL9xNJkme8NZpNy6/K/TqNX5p7LH0tMp+bHCY/
eN/35v51J6uPa1Qt6w83x69HUrMu8S+7/V+rMo7HH8sdsU7ykPhX0dHUXGf8
40X/Piqft4zjbOMlSXIp+/YfcidTTOceW5OujbZ435kcIjdvyh1sHw8G7lO3
ML77Tu5U+vwXcq92+7uvNfOEX+3G3Wytvx/54Zb3r5fHOmN72/kL35/377Py
vOXzeN+cJMlzt1mv98zf381x9OHq4yJ5dsvfweMxj/eJ6uMZNd98I3e0m6cz
GLLKuMvraLbW36/885bj2pV35g61bm7f7/7JWb8Py8eVf1eex/EySZIXbpnn
16xL83I3j+w/IuctyD5b5o00x9H/XX08o2I3n7Vdl20w7LWv4yuR4+hht9xP
6p23c9Od77+XM/+EJMnFsPz/70T8nfVQN0/RfG6yvzbnnV9I11+Xs57+hbpj
e+5Ye5+/Ve320am8rrfezB2rvr9JkiSH3TLPa9D200dyB6uPi+QZy/ta5f2u
uev51h/fsFnm2zTHlz9qt49u5XU+sCpnnhFJkuT5Wv4u3xLrEm1KY8ty//WB
++TUHye5lP1cVK5jtG7Bhboy2tLtz6XSlqbq+58kSXLY3bsnd6q7j2m5vrK5
Ttp8brKmO3fkjrePB4N7J3PHq49r2Lzn7ly5Hnjp9sTjOddFkyRJXqifiY60
jweDi6ID1cdFLmXvivOl5XzzYOA+Refn56NXuv24VFsRvVL960GSJDkqXhZt
a6+3nEz/GJ2sPi5yKfrJaKq7vsI6f+fmurW5U6m50c/N7fYlXOyH73XzjpqN
9b9OJEmSw+r6dbnTafyK3FMppotOvpia/N1OLqbNOtHb03i8r/V89fEMmx+8
772aPh1ZL5IkSXK+nHud3GAwcU3Our/kYtrcp/2ltGVzVH08w+bkPblyvy+V
yvsyzaP6XyeSJMlR8fobcjvTIOZz35b+NjpRfVzkUrDMA7kx2lN9PMNmTFce
e6V9rNLc68Hrf51IkiRHxa9HM+3foRvb+0Y/l/bvy81UHx85im5Ynys/X4PB
nXfkzLc9V8diHcRnu/2oprn7pf7XiSRJctSM08/jx7t1ePbsjqqPixxF778v
V9btGwzefCPnvkPnquPnD8/xM0mS5OK4KtqTxq/M/SrFZdHXWFeMnE+/Ep1Z
f+Dvounq4xo2zd/+8MzfJkmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJMmP5/8H+Doy/g==
   "], {{0, 0}, {488, 488}}, {0, 1.}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.737815779047821*^9, 3.737815781963283*^9}, {
   3.737815817555731*^9, 3.7378158384055147`*^9}, 3.737817280053393*^9, 
   3.737822136288672*^9, 3.737900748871677*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"28a51e0d-0e2e-4f50-8761-64ac16a2121a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"net2", ",", 
    RowBox[{"test", "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", "500"}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7378136377970533`*^9, 3.7378136462335453`*^9}, {
   3.737813688451853*^9, 3.7378136968643093`*^9}, {3.737814300618699*^9, 
   3.737814301917201*^9}, {3.73781443079484*^9, 3.737814431005417*^9}, {
   3.737815673016737*^9, 3.737815675417815*^9}, 3.737819402947146*^9, {
   3.7379794771718807`*^9, 3.737979477502222*^9}, {3.73798021083053*^9, 
   3.737980211172924*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"012fee8f-d25f-4ec6-a374-0bdebaa92712"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierMeasurementsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Net\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["500", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Net\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["500", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "0.9959999999999999964`6.8650294961080345", 
                    "\[PlusMinus]", "0.0028255916081190847`2."}], 
                    "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[
             ClassifierMeasurementsObject, 5768776, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierMeasurementsObject, 
            10252777911810756483806346346071773446097511161159869014496, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierMeasurementsObject[\[Ellipsis]]"& )],
  False,
  BoxID -> 10252777911810756483806346346071773446097511161159869014496,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.737813684377096*^9, 3.737813704598341*^9}, {
   3.737814293184602*^9, 3.7378143161379128`*^9}, 3.73781449800476*^9, 
   3.737815684854678*^9, 3.737819410874485*^9, 3.737979459551454*^9, 
   3.7379795624724073`*^9, 3.7379806700202827`*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"94330874-4a37-4afe-908c-68dc0684fd82"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.737813651136685*^9, 3.737813651152217*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"ab147b13-522f-4cdc-802d-7be02edbe556"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{1., 1., 1.}, {1., 1., 1.}, {0.8627185989393408, 
   0.5696571043996923, 0.028248330463541527`}}, {{1., 1., 1.}, {
   0.933769136582606, 0.48579203187747466`, 0.003297449380375962}, {1., 1., 
   1.}}, {{1., 0.42, 0.}, {1., 1., 1.}, {0.9400865554243316, 
   0.8920468831043017, 0.72658943835727}}}, {{0, 0}, {3, 3}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["182", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "182", "\" examples of \"", "1", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9891304347826086`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.994535519125683`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{182, " examples of ", 1, " correctly classified"}], 
         Row[{"Precision = ", 1.}], 
         Row[{"Recall = ", 0.9891304347826086}], 
         Row[{"FScore = ", 0.994535519125683}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "2", "\" misclassified as \"", "1"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", 2, " misclassified as ", 1}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "3", "\" misclassified as \"", "1"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", 3, " misclassified as ", 1}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "1", "\" misclassified as \"", "2"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", 1, " misclassified as ", 2}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["170", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "170", "\" examples of \"", "2", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{170, " examples of ", 2, " correctly classified"}], 
         Row[{"Precision = ", 1.}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "3", "\" misclassified as \"", "2"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", 3, " misclassified as ", 2}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "2", "\" examples of \"", "1", "\" misclassified as \"", "3"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.013513513513513514`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.010869565217391304`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{2, " examples of ", 1, " misclassified as ", 3}], 
         Row[{"Column fraction = ", 0.013513513513513514`}], 
         Row[{"Row fraction = ", 0.010869565217391304`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "2", "\" misclassified as \"", "3"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", 2, " misclassified as ", 3}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["146", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "146", "\" examples of \"", "3", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9864864864864865`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9931972789115646`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{146, " examples of ", 3, " correctly classified"}], 
         Row[{"Precision = ", 0.9864864864864865}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.9931972789115646}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"184", "\" example\"", "\"s\"", "\" of class \"", "1"},
            "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9891304347826086`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{184, " example", "s", " of class ", 1}], 
        Row[{"Recall = ", 0.9891304347826086}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"170", "\" example\"", "\"s\"", "\" of class \"", "2"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{170, " example", "s", " of class ", 2}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"146", "\" example\"", "\"s\"", "\" of class \"", "3"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{146, " example", "s", " of class ", 3}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "182", "\" example\"", "\"s\"", "\" classified as \"", "1"}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{182, " example", "s", " classified as ", 1}], 
        Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "170", "\" example\"", "\"s\"", "\" classified as \"", "2"}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{170, " example", "s", " classified as ", 2}], 
        Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "148", "\" example\"", "\"s\"", "\" classified as \"", "3"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9864864864864865`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{148, " example", "s", " classified as ", 3}], 
        Row[{"Precision = ", 0.9864864864864865}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{2.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["3", BoxRotation -> 0.], TraditionalForm]}}, {{2.5, 
       FormBox["184", TraditionalForm]}, {1.5, 
       FormBox["170", TraditionalForm]}, {0.5, 
       FormBox["146", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["182", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["170", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["148", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["3", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.7378136937007113`*^9, 3.737813705671959*^9}, {
   3.737814296520151*^9, 3.7378143261103373`*^9}, 3.73781468896467*^9, 
   3.737815687481132*^9, 3.737819415106688*^9, 3.737979471774205*^9, 
   3.73797956819318*^9, 3.737980674462534*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"55796b84-6eca-4c8b-9208-7bf295910218"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", 
  RowBox[{"\"\<WorstClassifiedExamples\>\"", "\[Rule]", "2"}], "]"}]], "Input",\

 CellChangeTimes->{{3.737814692914789*^9, 3.737814707846361*^9}, 
   3.7378156954202757`*^9, {3.737980701303335*^9, 3.73798070148337*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"b044c54a-40b9-410e-891c-682eb20ef52a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[{
      {Thickness[0.001036766157782143], 
       LineBox[{{0, 0}, {0.3038547822093146, 0.12327517503750063`}}]}, 
      {Thickness[0.001036766157782143], 
       LineBox[{{0, 0}, {-0.3038547822093146, -0.12327517503750063`}}]}},
     ImageSize->{128, 128},
     PlotRange->{{-1.4318465082873435`, 
      1.4318465082873435`}, {-1.4318465082873435`, 1.4318465082873435`}}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    GraphicsBox[{
      {Thickness[0.001309791802521998], 
       LineBox[{{0, 0}, {-0.07855816970868568, -0.0732171299158029}}]}, 
      {Thickness[0.001309791802521998], 
       LineBox[{{0, 0}, {0.07855816970868568, 0.0732171299158029}}]}},
     ImageSize->{128, 128},
     PlotRange->{{-1.1160241854981767`, 
      1.1160241854981767`}, {-1.1160241854981767`, 1.1160241854981767`}}], 
    "\[Rule]", "1"}]}], "}"}]], "Output",
 CellChangeTimes->{3.737814708412774*^9, 3.737815695930208*^9, 
  3.737819418803072*^9, 3.7379807027296658`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"4c033318-a4c3-414b-86fe-2e074e207fed"]
}, Open  ]]
},
WindowSize->{808, 911},
WindowMargins->{{Automatic, 92}, {Automatic, 0}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 282, 5, 52, "Input",ExpressionUUID->"537272cc-cea5-4b49-8e64-39f818ae04cf"],
Cell[865, 29, 297, 5, 34, "Output",ExpressionUUID->"9246bc32-f80b-4584-827c-6708744b0f6c"]
}, Open  ]],
Cell[1177, 37, 6996, 192, 598, "Input",ExpressionUUID->"b2f76d6f-9ec8-46e1-aed6-39324c06e970"],
Cell[8176, 231, 1969, 53, 199, "Input",ExpressionUUID->"55018b46-9792-4031-b317-656d7763fb9e"],
Cell[10148, 286, 6710, 171, 577, "Input",ExpressionUUID->"0444eb61-1f2f-4fa2-9f83-a0bf219bfda6"],
Cell[CellGroupData[{
Cell[16883, 461, 1225, 33, 136, "Input",ExpressionUUID->"3680eafe-f529-46f2-af4f-f949a1be13bd"],
Cell[18111, 496, 342, 5, 34, "Output",ExpressionUUID->"65675aff-ee19-44be-a9a0-b432fc7f43e6"]
}, Open  ]],
Cell[18468, 504, 570, 15, 52, "Input",ExpressionUUID->"259c73e6-f10d-4050-8ea1-7e5b59059f39"],
Cell[CellGroupData[{
Cell[19063, 523, 1237, 29, 115, "Input",ExpressionUUID->"627c33cd-c71f-4737-a793-e672ccbc628e"],
Cell[20303, 554, 38807, 785, 75, "Output",ExpressionUUID->"9defbd74-f369-45e0-99cf-6a442580dfd1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59147, 1344, 1713, 39, 157, "Input",ExpressionUUID->"51357dae-68c2-4cf4-a691-9659d26efc59"],
Cell[60863, 1385, 58522, 1175, 75, "Output",ExpressionUUID->"582b362d-8fab-4286-bdfb-9f6e78399a0b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119422, 2565, 1904, 43, 178, "Input",ExpressionUUID->"137bbcab-6b46-4e79-a550-c0ff5557dea8"],
Cell[121329, 2610, 69294, 1389, 75, "Output",ExpressionUUID->"a9a77baf-1b21-42ab-a7c7-8162c427f05a"]
}, Open  ]],
Cell[190638, 4002, 472, 11, 94, "Input",ExpressionUUID->"fcada6a8-8407-43e9-8848-cca0ba23e5de"],
Cell[191113, 4015, 411, 10, 30, "Input",ExpressionUUID->"693f1fb4-c1eb-4ad6-a829-8f5818e66421"],
Cell[CellGroupData[{
Cell[191549, 4029, 1780, 36, 178, "Input",ExpressionUUID->"391acf20-a101-4948-ac14-a06b64cfbfaf"],
Cell[193332, 4067, 57070, 1141, 75, "Output",ExpressionUUID->"52c9edfb-bc27-400c-b3c5-8ee6b78e9677"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250439, 5213, 486, 11, 30, "Input",ExpressionUUID->"fcffb957-49cb-4c07-8a9c-2f87fb350a79"],
Cell[250928, 5226, 593, 11, 37, "Output",ExpressionUUID->"43ed3781-1c9b-43f7-a9f0-137a116f3906"]
}, Open  ]],
Cell[CellGroupData[{
Cell[251558, 5242, 310, 5, 30, "Input",ExpressionUUID->"d907b061-ebfb-4239-a72b-b7d619a69c9d"],
Cell[251871, 5249, 2970, 58, 377, "Output",ExpressionUUID->"4e4b4910-b093-42f1-87a3-76414153b0f0"]
}, Open  ]],
Cell[254856, 5310, 347, 8, 30, "Input",ExpressionUUID->"e1efca10-57de-4e45-b4e5-7c9ba3df6cab"],
Cell[255206, 5320, 254, 5, 30, "Input",ExpressionUUID->"635d0e7e-a9e7-447c-85ac-ff493821bc56"],
Cell[255463, 5327, 290, 6, 30, "Input",ExpressionUUID->"2fcd5fcd-afc0-41f1-8f48-62ca61fef5ff"],
Cell[CellGroupData[{
Cell[255778, 5337, 220, 3, 30, "Input",ExpressionUUID->"bd124851-6e0e-4f4b-9292-3a10687d43bf"],
Cell[256001, 5342, 342, 6, 34, "Output",ExpressionUUID->"f7242b9a-c8d4-466b-8ab8-4b0649426813"]
}, Open  ]],
Cell[CellGroupData[{
Cell[256380, 5353, 252, 4, 52, "Input",ExpressionUUID->"cb3aeac0-ff4f-48ef-9dba-d26026dc3342"],
Cell[256635, 5359, 153, 2, 34, "Output",ExpressionUUID->"ad8382e1-0aff-4369-bcde-046a4bb13945"],
Cell[256791, 5363, 151, 2, 34, "Output",ExpressionUUID->"745456d9-d99b-4466-8318-e7d616add173"]
}, Open  ]],
Cell[CellGroupData[{
Cell[256979, 5370, 779, 22, 52, "Input",ExpressionUUID->"01bc7720-5e2a-4d2b-a6f3-61082e8aa279"],
Cell[257761, 5394, 378, 7, 37, "Output",ExpressionUUID->"bfd8af23-07f4-44c0-b197-cce549e869a8"]
}, Open  ]],
Cell[258154, 5404, 2143, 51, 199, "Input",ExpressionUUID->"244db3a3-0420-43ee-b826-0c3bedc936b0"],
Cell[260300, 5457, 980, 25, 30, "Input",ExpressionUUID->"7967ada4-3726-4ff0-9dab-079e0f3a1b4a"],
Cell[CellGroupData[{
Cell[261305, 5486, 1524, 34, 94, "Input",ExpressionUUID->"895da777-4090-4e19-9ead-c481d01ed54c"],
Cell[262832, 5522, 16056, 267, 226, "Output",ExpressionUUID->"0b5e000a-bc9d-498d-a9a1-b3726a55da6d"]
}, Open  ]],
Cell[278903, 5792, 129, 3, 30, "Input",ExpressionUUID->"3e6f097b-6e92-4bd6-bc83-a14d69631e95"],
Cell[CellGroupData[{
Cell[279057, 5799, 264, 4, 30, "Input",ExpressionUUID->"a9a9341b-b30d-4779-b1f5-7fa1582f5065"],
Cell[279324, 5805, 22307, 370, 376, "Output",ExpressionUUID->"28a51e0d-0e2e-4f50-8761-64ac16a2121a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[301668, 6180, 684, 13, 30, "Input",ExpressionUUID->"012fee8f-d25f-4ec6-a374-0bdebaa92712"],
Cell[302355, 6195, 8880, 180, 89, "Output",ExpressionUUID->"94330874-4a37-4afe-908c-68dc0684fd82"]
}, Open  ]],
Cell[CellGroupData[{
Cell[311272, 6380, 226, 3, 31, "Input",ExpressionUUID->"ab147b13-522f-4cdc-802d-7be02edbe556"],
Cell[311501, 6385, 16388, 427, 329, "Output",ExpressionUUID->"55796b84-6eca-4c8b-9208-7bf295910218"]
}, Open  ]],
Cell[CellGroupData[{
Cell[327926, 6817, 334, 6, 31, "Input",ExpressionUUID->"b044c54a-40b9-410e-891c-682eb20ef52a"],
Cell[328263, 6825, 1105, 25, 147, "Output",ExpressionUUID->"4c033318-a4c3-414b-86fe-2e074e207fed"]
}, Open  ]]
}
]
*)

